MVC_5：すべてがメッセージング「MVC_5.zip」←これを${HOME}/Downloads/に
----------
モデル・ビュー・コントローラ（MVC）Javaプログラムのアーカイブ（設計図も含む）ですが、if文、while文、for文などを、一切、使っていないバージョンになります。
ラムダ式を用いて、ifTrue(…)、whileTrue(…)、forEach(…)などのメッセージングによって、すべてがオブジェクト指向の設え（しつらえ）になっています。
この設えを備えるには、テクニック（技術）とスキル（技能）が必要でして、ラムダ式を条件として扱う「condition.Condition」を新設しています。
通常、このラムダ式のスコープの中に外側のスコープから持ち込める変数は、実質的にfinal（変更不可）でなければなりません。
つまり、コンカレント・クリーン（副作用が無し）であり、スレッド・セーフ（リエントラントである）ということです。
しかしながら、外側のスコープからラムダ式のスコープの中に、変数を持ち込まなければ、情報やデータの受け渡し（やり取り）ができないことも多々あります。
そこで、volatile性を有したAtomicReferenceを上手に利用して、スレッド・セーブなオブジェクト「condition.ValueHolder」も新設しています。
このSmalltalk流の「ValueHolder」であれば、ラムダ式のスコープの中に安全に（スレッド・セーフを維持したまま）持ち込むことができます。
きっと、皆さんの賢さ（さらなる学び）につながるだろうという思いから、差し上げる次第です。
コードリーディングをしてくださいませ。

$ (cd ${HOME}/Downloads/ ; xattr -c ./MVC_5.zip)    # ダウンロードしたZIPファイルの拡張属性をクリアする
$ (cd ${HOME}/Desktop/ ; unzip ${HOME}/Downloads/MVC_5.zip ; xattr -cr ./MVC_5/)    # デスクトップに展開し、それらの拡張属性を再起的にクリアする
$ (cd ${HOME}/Desktop/MVC_5/ ; make app check)    # デスクトップの展開ディレクトリにおいて、アプリケーションを作成して実行する（メッセージングのチェックも行う）
